//
//  TableViewController.swift
//  BancaDigital
//
//  Created Jorge Parra on 21/08/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Carlos Torres, Inspired by Juanpe Catalán VIPER Template




import UIKit
//MARK: table class is used for both tables
class TableViewController: UIViewController, TableViewProtocol {
    
    

    //MARK: Attributes
    var tabTitle: (title: String, typeOfCall: Int)?
	var presenter: TablePresenterProtocol?
    var list : [ImageTextAndImageModel] = []
    
    @IBOutlet weak var table: UITableView!
    
    
    //MARK: LIfe cycles
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViewCell()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        guard let aux = tabTitle else{
            return
        }
        self.title = aux.title
        presenter?.callAPI(with: aux.typeOfCall)
    }
   
    //MARK: Setup table
    private func setupViewCell(){
        table.register(TableCellImageTextImage.nib(),forCellReuseIdentifier: TableCellImageTextImage.identifier)
        
        table.dataSource = self
        table.delegate = self
    }
    //MARK: Func that receives ImageTextAndImageModel
    func apiResponse(with response: [ImageTextAndImageModel]) {
        list = response
        DispatchQueue.main.async {
            self.table.reloadData()
        }
    }
 
    
    //MARK: Func that displays error message
    func callErrorMessage() {
        self.errorNetwork()
    }
    //MARK: Func deletes from table and reloads
    func didDelete(answer index: Int) {
        guard let type = tabTitle else{return}
        if type.typeOfCall == 1 {
            list.removeAll(where: { element in
                element.id == index
            })
        }
       
        DispatchQueue.main.async {
            self.table.reloadData()
            
        }
    }

}


extension TableViewController : UITableViewDataSource ,UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        list.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: TableCellImageTextImage.identifier) as? TableCellImageTextImage else {return UITableViewCell()}
        let index = list[indexPath.row]
        cell.setupCell(with: index)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        60
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        guard let  type = tabTitle else{
            return
        }
        if type.typeOfCall == 1 {
            presenter?.callDetail(with: indexPath.row)
        }
    }
    
    func getSwipeFavorite(index:Int) -> UISwipeActionsConfiguration {
        let swipe = UIContextualAction(style: .normal, title: "Favorite") { [weak self] (action, view, completionHandler) in
            guard let self = self else {return}
            self.list[index].changeIsFavorite(status: true)
            self.presenter?.saveCoredata(with: index)
            
            DispatchQueue.main.async {
                self.table.reloadData()
            }
        }

        swipe.backgroundColor = UIColor.green
        let config = UISwipeActionsConfiguration(actions: [swipe])
        config.performsFirstActionWithFullSwipe = false
        return config
    }
    
    
    
    func getSwipeDelete(index:Int) -> UISwipeActionsConfiguration {
        let swipe = UIContextualAction(style: .normal, title: "Delete") { [weak self] (action, view, completionHandler) in
            guard let self = self else {return}
           
            self.deleteShow { answer  in
                if answer == true {
                    self.list[index].changeIsFavorite(status: false)
                    self.presenter?.deleteCoredata(with: self.list[index].id)
                }
            }
            
        }

        swipe.backgroundColor = UIColor.red
        let config = UISwipeActionsConfiguration(actions: [swipe])
        config.performsFirstActionWithFullSwipe = false
        return config
    }
    
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let index = indexPath.row
        let cell = list[index]
        return  cell.isFavorite == true ?  getSwipeDelete(index: index) : getSwipeFavorite(index: index)
    }
    

}
